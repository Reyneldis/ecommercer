generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  clerkId       String         @unique
  email         String         @unique
  firstName     String
  lastName      String
  role          Role           @default(USER)
  avatar        String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  isActive      Boolean        @default(true)
  cartItems     CartItem[]
  orders        Order[]
  reviews       Review[]
  wishlistItems WishlistItem[]

  @@map("users")
}

model Category {
  id           String    @id @default(cuid())
  categoryName String
  slug         String    @unique
  mainImage    String?
  description  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  products     Product[]

  @@map("categories")
}

model Product {
  id            String           @id @default(cuid())
  slug          String           @unique
  productName   String
  price         Decimal          @db.Decimal(10, 2)
  description   String?
  categoryId    String
  features      Json?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  status        ProductStatus    @default(active)
  cartItems     CartItem[]
  orderItems    OrderItem[]
  images        ProductImage[]
  variants      ProductVariant[]
  category      Category         @relation(fields: [categoryId], references: [id])
  reviews       Review[]
  wishlistItems WishlistItem[]

  @@map("products")
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  url       String
  alt       String?
  sortOrder Int      @default(0)
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductVariant {
  id         String      @id @default(cuid())
  productId  String
  name       String
  price      Decimal     @db.Decimal(10, 2)
  stock      Int         @default(0)
  attributes Json
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  cartItems  CartItem[]
  orderItems OrderItem[]
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

model CartItem {
  id        String          @id @default(cuid())
  userId    String
  productId String
  variantId String?
  quantity  Int             @default(1)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, variantId])
  @@map("cart_items")
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model Order {
  id             String         @id @default(cuid())
  orderNumber    String         @unique
  userId         String
  status         OrderStatus    @default(PENDING)
  customerEmail  String
  customerName   String
  subtotal       Decimal        @db.Decimal(10, 2)
  taxAmount      Decimal        @default(0) @db.Decimal(10, 2)
  shippingAmount Decimal        @default(0) @db.Decimal(10, 2)
  total          Decimal        @db.Decimal(10, 2)
  paymentStatus  PaymentStatus  @default(PENDING)
  paymentMethod  PaymentMethod?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  items          OrderItem[]
  user           User           @relation(fields: [userId], references: [id])

  @@map("orders")
}

model OrderItem {
  id          String          @id @default(cuid())
  orderId     String
  productId   String
  variantId   String?
  productName String
  productSku  String
  variantName String?
  price       Decimal         @db.Decimal(10, 2)
  quantity    Int
  total       Decimal         @db.Decimal(10, 2)
  createdAt   DateTime        @default(now())
  order       Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product         @relation(fields: [productId], references: [id])
  variant     ProductVariant? @relation(fields: [variantId], references: [id])

  @@map("order_items")
}

model Review {
  id         String   @id @default(cuid())
  userId     String
  productId  String
  rating     Int
  title      String?
  comment    String?
  isVerified Boolean  @default(false)
  isApproved Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

model SiteSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("site_settings")
}

model AdminLog {
  id         String   @id @default(cuid())
  adminId    String
  action     String
  resource   String?
  resourceId String?
  details    Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  @@map("admin_logs")
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  BANK_TRANSFER
  CASH_ON_DELIVERY
}

enum ProductStatus {
  active
  inactive
}
